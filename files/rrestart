#!/bin/env python
# Mgrep server rolling restart.
# Script for restarting two mgrep daemons on distinct nodes when dictionary file is updated
# it is scheduled with a cron job.
#
# Logic:
# 1. Master node detects updated dictionary file.
# 2. Master waits until slave node detects updated dictionary file and restarts
# 3. Slave sends message to master when restart is complete
# 4. Master restarts and updates time stamp in redis
#
# Requires redis python module v2.10+ (pip install redis)
#
# author: Alex Skrenchuk

import time
import datetime
import subprocess
import redis
import sys, getopt
import socket # to get hostname

# Defaults
redishost='localhost'
redisport='6379'
verbose=False
force=False
# runs as slave by default.
master=False
hostname=socket.gethostname()
service='mgrep'

# Read command line args
myopts, args = getopt.getopt(sys.argv[1:],"r:p:vfms:h")

for o, a in myopts:
    if o == '-r':
      redishost = a
    if o == '-p':
      redisport = a
    if o == '-v':
      verbose = True
    if o == '-f':
      force = True
    if o == '-m':
      master = True
    if o == '-s':
      service = a
    if o == '-h':
      print ("usage: rrestart -vmf -r redis host -p redis port -s service init.d script")
      print ("-r: redis host\n-p: redis port number\n-v: verbose\n-f: force restart without checking time stamps")
      print ("-s: service init.d script for mgrep server\n-m: master - master node waits for slaves to comple resatrt")
      print ("example: rrestart -m -r redishost.domain -p 6380 -s mgrep-p5556")
      sys.exit()

r = redis.StrictRedis(host=redishost, port=redisport)

try:
  last_mgrep_restart_stamp = r.get('last_mgrep_restart_stamp')
  mgrep_dict_refresh_stamp = r.get('mgrep_dict_refresh_stamp')
except redis.ConnectionError:
  sys.exit("can't connect to redis running on %s" % redishost)

if last_mgrep_restart_stamp == None or mgrep_dict_refresh_stamp == None:
  sys.exit('Timestamp entries are missing in redis. Perhaps it is not initiated properly.')

if verbose == True:
  print ("checking dictionary generation timestamp on redis host %s" % redishost)
  print ("last_mgrep_restart_stamp = %s" % last_mgrep_restart_stamp)
  print ("mgrep_dict_refresh_stamp = %s" % mgrep_dict_refresh_stamp)

if last_mgrep_restart_stamp < mgrep_dict_refresh_stamp or force == True:
  if verbose == True:
    print 'dictionary update is detected, restarting mgrep'
  ts = time.time()
  st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

  p = r.pubsub(ignore_subscribe_messages=True)
  p.subscribe('mgrep_restart-channel')

  if master == True:
    # wait untill slave cron kicks off and sends a message and then restart mgrep
    for i in range(650):
      message = p.get_message()
      if verbose == True:
        print ("master is sleeping for %s seconds" % i)
      if message:
        #if we get message then it means that slave mgrep is restarted
        break
      time.sleep(1)  # be nice to the system
  else:
    # This script is run via cron job every 5 min so
    # we make slave sleep for 10 seconds to give master opportunity to take the lead
    time.sleep(10)

  # Restart mgrep server
  # 1. create a lock in redis to prevent two nodes restarting at the same time.
  # we are using reis SET NX and SET EX.
  # 2. restart mgrep
  # 3. send a message via redis chanel that we are done restarting mgrep service
  # 4. Master node will wait to restart mgrep untill it sees the message send by slave node
  # 5. Master node updates the last mgrep server restart time.

  while not r.setnx('mgrep_restart_lock', hostname):
    lockedoutby = r.get('mgrep_restart_lock')
    if verbose == True:
      print ("waiting for lock on %s" % lockedoutby )
    time.sleep(1)
  if verbose == True:
     print 'got the lock'
  r.setex('mgrep_restart_lock', 300, hostname)
  if verbose == True:
    print ("restarting mgrep service %s" % service)
  if subprocess.call(['/bin/systemctl', 'restart',  'mgrep.service']):
    sys.exit('unable to restart mgrep service')
  else:
    r_server.set('last_mgrep_restart_stamp', st)
  time.sleep(10)

  r.delete('mgrep_restart_lock')
  r.publish('mgrep_restart-channel', 'done')

  #update the timestamp for the last mgrep restart
  if master == True:
    r.set('last_mgrep_restart_stamp', st)
  if verbose == True:
    print 'all done'
else:
  if verbose == True:
   print 'new dictionary file is NOT detected'
